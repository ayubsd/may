# Polynomial Regression with Visualization and Cross-Validation

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split, cross_val_score

# 1. Generating the dataset
np.random.seed(0)
x = np.random.rand(100, 1) * 10
y = 2 * x**2 - 0.5 * x + 5 + np.random.randn(100, 1) * 10

# 2. Creating polynomial features (degree 2)
poly = PolynomialFeatures(degree=2)
x_poly = poly.fit_transform(x)

# 3. Splitting into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x_poly, y, test_size=0.2, random_state=100)

# 4. Training the regression model
model = LinearRegression()
model.fit(x_train, y_train)

# 5. Making predictions
y_pred = model.predict(x_test)

# 6. Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("MSE:", mse)
print("R2 Score:", r2)

# 7. K-Fold Cross-Validation (K=5)
mse_scores = -cross_val_score(model, x_poly, y, cv=5, scoring='neg_mean_squared_error')
r2_scores = cross_val_score(model, x_poly, y, cv=5, scoring='r2')
print("Average MSE in K-Fold Cross-Validation:", mse_scores.mean())
print("Average R2 Score in K-Fold Cross-Validation:", r2_scores.mean())

# 8. Visualization
plt.scatter(x, y, color='blue', label='Original Data')
x_range = np.linspace(x.min(), x.max(), 100).reshape(-1, 1)
x_range_poly = poly.transform(x_range)
plt.plot(x_range, model.predict(x_range_poly), color='red', label='Polynomial Regression')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Polynomial Regression Fit')
plt.legend()
plt.show()
